// Code generated by MockGen. DO NOT EDIT.
// Source: es_op.go

// Package basetool is a generated GoMock package.
package basetool

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBaseEsOp is a mock of BaseEsOp interface.
type MockBaseEsOp struct {
	ctrl     *gomock.Controller
	recorder *MockBaseEsOpMockRecorder
}

// MockBaseEsOpMockRecorder is the mock recorder for MockBaseEsOp.
type MockBaseEsOpMockRecorder struct {
	mock *MockBaseEsOp
}

// NewMockBaseEsOp creates a new mock instance.
func NewMockBaseEsOp(ctrl *gomock.Controller) *MockBaseEsOp {
	mock := &MockBaseEsOp{ctrl: ctrl}
	mock.recorder = &MockBaseEsOpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseEsOp) EXPECT() *MockBaseEsOpMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBaseEsOp) Delete(uri string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", uri)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseEsOpMockRecorder) Delete(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseEsOp)(nil).Delete), uri)
}

// Get mocks base method.
func (m *MockBaseEsOp) Get(uri string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", uri)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBaseEsOpMockRecorder) Get(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBaseEsOp)(nil).Get), uri)
}

// Post mocks base method.
func (m *MockBaseEsOp) Post(uri, params string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", uri, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockBaseEsOpMockRecorder) Post(uri, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockBaseEsOp)(nil).Post), uri, params)
}

// Put mocks base method.
func (m *MockBaseEsOp) Put(uri, params string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", uri, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockBaseEsOpMockRecorder) Put(uri, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBaseEsOp)(nil).Put), uri, params)
}
